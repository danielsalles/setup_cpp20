cmake_minimum_required(VERSION 3.25)

# üéØ Project setup with modern standards
project(ModernCpp20Demo
    VERSION 1.0.0
    DESCRIPTION "C++20 Modern Features Demonstration"
    LANGUAGES CXX
)

# üöÄ Force C++20 - No compromise!
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# üì¶ Package managers integration
# vcpkg integration (if using vcpkg)
if(DEFINED CMAKE_TOOLCHAIN_FILE)
    message(STATUS "üì¶ Using vcpkg toolchain: ${CMAKE_TOOLCHAIN_FILE}")
endif()

# Conan integration (if using conan)
if(EXISTS "${CMAKE_BINARY_DIR}/conan_toolchain.cmake")
    include("${CMAKE_BINARY_DIR}/conan_toolchain.cmake")
    message(STATUS "üêç Using Conan toolchain")
endif()

# üîß Compiler-specific optimizations
if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    # Clang specific flags (matches our setup aliases)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
    set(COMPILER_WARNINGS
        -Wall -Wextra -Wpedantic
        -Wunused -Wformat=2
        -Wnull-dereference
        -Wdouble-promotion
        -Wshadow
        -Wconversion
    )
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    # GCC specific flags
    set(COMPILER_WARNINGS
        -Wall -Wextra -Wpedantic
        -Wunused -Wformat=2
        -Wnull-dereference
        -Wdouble-promotion
        -Wduplicated-cond
        -Wlogical-op
        -Wshadow
        -Wconversion
    )
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # MSVC specific flags
    set(COMPILER_WARNINGS
        /W4
        /permissive-
        /w14640 # Enable warning on thread un-safe static member initialization
    )
endif()

# üé® Build types configuration
set(CMAKE_CXX_FLAGS_DEBUG "-g -O0 -DDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG -march=native")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g -DNDEBUG")

# üèó Create executable target
add_executable(${PROJECT_NAME} modern_cpp20_demo.cpp)

# üéØ Apply modern CMake practices
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_20)
target_compile_options(${PROJECT_NAME} PRIVATE ${COMPILER_WARNINGS})

# üîí Security hardening flags
if(APPLE)
    # macOS security flags
    target_compile_options(${PROJECT_NAME} PRIVATE
        -fstack-protector-strong
        -D_FORTIFY_SOURCE=2
    )
    target_link_options(${PROJECT_NAME} PRIVATE
        -Wl,-dead_strip
    )
elseif(UNIX)
    # Linux security flags
    target_compile_options(${PROJECT_NAME} PRIVATE
        -fstack-protector-strong
        -D_FORTIFY_SOURCE=2
    )
    target_link_options(${PROJECT_NAME} PRIVATE
        -Wl,-z,relro
        -Wl,-z,now
    )
endif()

# üçé macOS specific settings
if(APPLE)
    target_compile_definitions(${PROJECT_NAME} PRIVATE APPLE_PLATFORM)
    # Use the LLVM installed by our setup
    if(EXISTS "/opt/homebrew/opt/llvm/bin/clang++")
        message(STATUS "üçé Using Homebrew LLVM")
    endif()
endif()

# ü™ü Windows specific settings
if(WIN32)
    target_compile_definitions(${PROJECT_NAME} PRIVATE WIN32_PLATFORM)
    # Windows-specific libraries
    # target_link_libraries(${PROJECT_NAME} PRIVATE ws2_32)
endif()

# üêß Linux specific settings
if(UNIX AND NOT APPLE)
    target_compile_definitions(${PROJECT_NAME} PRIVATE LINUX_PLATFORM)
endif()

# üìä Print build information
message(STATUS "üöÄ Build Configuration:")
message(STATUS "  üìÅ Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  üîß Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "  üìã C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "  üéØ Target: ${PROJECT_NAME}")
message(STATUS "  üõ† Generator: ${CMAKE_GENERATOR}")

# üß™ Enable testing (optional)
option(ENABLE_TESTING "Enable testing" OFF)
if(ENABLE_TESTING)
    enable_testing()
    # Example: add_subdirectory(tests)
endif()

# üì¶ Install configuration (optional)
install(TARGETS ${PROJECT_NAME}
    RUNTIME DESTINATION bin
    COMPONENT Runtime
)

# üé® IDE support
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
if(CMAKE_GENERATOR STREQUAL "Ninja")
    message(STATUS "ü•∑ Using Ninja build system (fast builds!)")
endif()

# üìù Export compile commands for IDEs
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)