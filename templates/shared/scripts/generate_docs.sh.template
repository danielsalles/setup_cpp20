#!/bin/bash

# Documentation generation script for {{ project_name }}
# This script generates API documentation using Doxygen

set -euo pipefail

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Configuration
DOCS_DIR="$PROJECT_ROOT/docs"
DOXYFILE="$PROJECT_ROOT/Doxyfile"
BUILD_DIR="$PROJECT_ROOT/build"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to show help
show_help() {
    cat << EOF
Documentation Generation Script for {{ project_name }}

USAGE:
    $(basename "$0") [OPTIONS]

OPTIONS:
    -h, --help      Show this help message
    -c, --clean     Clean existing documentation before generating
    -o, --open      Open documentation in browser after generation
    -v, --verbose   Enable verbose output
    --check-only    Only check if documentation tools are available

EXAMPLES:
    $(basename "$0")                    # Generate documentation
    $(basename "$0") --clean --open     # Clean, generate, and open
    $(basename "$0") --check-only       # Check tool availability

EOF
}

# Parse command line arguments
CLEAN=false
OPEN_DOCS=false
VERBOSE=false
CHECK_ONLY=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -c|--clean)
            CLEAN=true
            shift
            ;;
        -o|--open)
            OPEN_DOCS=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        --check-only)
            CHECK_ONLY=true
            shift
            ;;
        *)
            print_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Function to check prerequisites
check_prerequisites() {
    print_info "Checking prerequisites..."
    
    local all_good=true
    
    # Check for Doxygen
    if command_exists doxygen; then
        local doxygen_version
        doxygen_version=$(doxygen --version)
        print_success "Doxygen found (version: $doxygen_version)"
    else
        print_error "Doxygen not found. Please install Doxygen."
        print_info "Installation instructions:"
        print_info "  macOS:   brew install doxygen"
        print_info "  Ubuntu:  sudo apt-get install doxygen"
        print_info "  Windows: Download from https://www.doxygen.nl/download.html"
        all_good=false
    fi
    
    # Check for dot (optional, for graphs)
    if command_exists dot; then
        local dot_version
        dot_version=$(dot -V 2>&1 | head -n1)
        print_success "Graphviz dot found ($dot_version)"
    else
        print_warning "Graphviz dot not found. Class diagrams will be disabled."
        print_info "To enable graphs: brew install graphviz (macOS) or apt-get install graphviz (Ubuntu)"
    fi
    
    # Check if Doxyfile exists
    if [[ -f "$DOXYFILE" ]]; then
        print_success "Doxyfile found at $DOXYFILE"
    else
        print_error "Doxyfile not found at $DOXYFILE"
        all_good=false
    fi
    
    # Check if source directories exist
    {% if project_type == "library" -%}
    if [[ -d "$PROJECT_ROOT/include" ]]; then
        print_success "Include directory found"
    else
        print_warning "Include directory not found at $PROJECT_ROOT/include"
    fi
    {% endif -%}
    
    if [[ -d "$PROJECT_ROOT/src" ]]; then
        print_success "Source directory found"
    else
        print_warning "Source directory not found at $PROJECT_ROOT/src"
    fi
    
    if [[ "$all_good" == false ]]; then
        print_error "Prerequisites check failed"
        exit 1
    fi
    
    print_success "All prerequisites satisfied"
}

# Function to clean existing documentation
clean_docs() {
    if [[ "$CLEAN" == true ]]; then
        print_info "Cleaning existing documentation..."
        if [[ -d "$DOCS_DIR" ]]; then
            rm -rf "$DOCS_DIR"
            print_success "Cleaned $DOCS_DIR"
        else
            print_info "No existing documentation to clean"
        fi
    fi
}

# Function to generate documentation
generate_documentation() {
    print_info "Generating documentation..."
    
    # Change to project root for relative paths in Doxyfile
    cd "$PROJECT_ROOT"
    
    # Set verbose flag for doxygen if requested
    local doxygen_args=()
    if [[ "$VERBOSE" == true ]]; then
        doxygen_args+=()  # Doxygen is verbose by default
    else
        # Redirect stderr to capture warnings but not flood output
        exec 3>&2
        exec 2>/tmp/doxygen_warnings.log
    fi
    
    # Run Doxygen
    if doxygen "$DOXYFILE" "${doxygen_args[@]}"; then
        print_success "Documentation generated successfully"
        
        # Show warnings if not in verbose mode
        if [[ "$VERBOSE" == false ]] && [[ -f /tmp/doxygen_warnings.log ]]; then
            local warning_count
            warning_count=$(wc -l < /tmp/doxygen_warnings.log)
            if [[ $warning_count -gt 0 ]]; then
                print_warning "Doxygen reported $warning_count warnings:"
                cat /tmp/doxygen_warnings.log
            fi
            rm -f /tmp/doxygen_warnings.log
        fi
        
        # Restore stderr
        if [[ "$VERBOSE" == false ]]; then
            exec 2>&3
            exec 3>&-
        fi
        
        # Show documentation location
        if [[ -d "$DOCS_DIR/html" ]]; then
            print_success "HTML documentation available at: $DOCS_DIR/html/index.html"
        fi
        
        # Show file count
        local file_count
        if [[ -d "$DOCS_DIR/html" ]]; then
            file_count=$(find "$DOCS_DIR/html" -name "*.html" | wc -l)
            print_info "Generated $file_count HTML files"
        fi
        
    else
        print_error "Documentation generation failed"
        exit 1
    fi
}

# Function to open documentation
open_documentation() {
    if [[ "$OPEN_DOCS" == true ]]; then
        local index_file="$DOCS_DIR/html/index.html"
        if [[ -f "$index_file" ]]; then
            print_info "Opening documentation in browser..."
            
            # Detect platform and open accordingly
            case "$(uname -s)" in
                Darwin)  # macOS
                    open "$index_file"
                    ;;
                Linux)
                    if command_exists xdg-open; then
                        xdg-open "$index_file"
                    elif command_exists firefox; then
                        firefox "$index_file" &
                    elif command_exists google-chrome; then
                        google-chrome "$index_file" &
                    else
                        print_warning "Could not detect browser. Please open: $index_file"
                    fi
                    ;;
                CYGWIN*|MINGW32*|MSYS*|MINGW*)  # Windows
                    start "$index_file"
                    ;;
                *)
                    print_warning "Unknown platform. Please open: $index_file"
                    ;;
            esac
        else
            print_error "Documentation index file not found: $index_file"
        fi
    fi
}

# Main execution
main() {
    print_info "{{ project_name }} Documentation Generator"
    print_info "========================================"
    
    # Check prerequisites first
    check_prerequisites
    
    # If only checking, exit here
    if [[ "$CHECK_ONLY" == true ]]; then
        print_success "Prerequisites check completed"
        exit 0
    fi
    
    # Clean if requested
    clean_docs
    
    # Generate documentation
    generate_documentation
    
    # Open if requested
    open_documentation
    
    print_success "Documentation generation completed!"
    print_info "Next steps:"
    print_info "  - View documentation: open $DOCS_DIR/html/index.html"
    print_info "  - Share documentation: serve the $DOCS_DIR/html directory"
    print_info "  - Update documentation: run this script again after code changes"
}

# Run main function
main "$@" 