# Test configuration for {{ project_name }}
cmake_minimum_required(VERSION 3.20)

# Enable C++20 for tests
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Import VcpkgHelpers (should already be available from parent)
if(NOT COMMAND vcpkg_find_packages)
    list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../cmake)
    include(VcpkgHelpers)
endif()

# Find Catch2 via vcpkg
# Note: VcpkgHelpers should automatically find this if catch2 is in vcpkg.json
find_package(Catch2 3 QUIET)

if(NOT Catch2_FOUND)
    message(STATUS "Catch2 not found via vcpkg, using FetchContent fallback...")
    
    include(FetchContent)
    FetchContent_Declare(
        Catch2
        GIT_REPOSITORY https://github.com/catchorg/Catch2.git
        GIT_TAG v3.7.1
        GIT_SHALLOW TRUE
    )
    FetchContent_MakeAvailable(Catch2)
    
    # Make Catch2::Catch2WithMain available
    if(TARGET Catch2 AND NOT TARGET Catch2::Catch2WithMain)
        add_library(Catch2::Catch2WithMain ALIAS Catch2WithMain)
    endif()
endif()

# Test discovery
list(APPEND CMAKE_MODULE_PATH ${Catch2_SOURCE_DIR}/extras)
include(Catch)

# Collect all test files
file(GLOB_RECURSE TEST_SOURCES 
    "test_*.cpp" 
    "*_test.cpp"
    "*_tests.cpp"
)

# For library projects, include library-specific tests if available
{% if project_type == "library" -%}
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/test_library.cpp)
    list(APPEND TEST_SOURCES test_library.cpp)
endif()
{% endif %}

if(TEST_SOURCES)
    # Create test executable
    add_executable({{ project_name }}_tests ${TEST_SOURCES})
    
    # Set target properties
    set_target_properties({{ project_name }}_tests PROPERTIES
        CXX_STANDARD 20
        CXX_STANDARD_REQUIRED ON
        CXX_EXTENSIONS OFF
    )
    
    # Link against Catch2
    target_link_libraries({{ project_name }}_tests 
        PRIVATE 
            Catch2::Catch2WithMain
    )
    
    {% if project_type == "library" -%}
    # Link against the main library for library projects
    if(TARGET {{ project_name }})
        target_link_libraries({{ project_name }}_tests 
            PRIVATE 
                {{ project_name }}::{{ project_name }}
        )
    endif()
    {% endif -%}
    
    # Include directories
    target_include_directories({{ project_name }}_tests 
        PRIVATE 
            ${CMAKE_CURRENT_SOURCE_DIR}
            {% if project_type == "library" -%}
            ${CMAKE_CURRENT_SOURCE_DIR}/../include
            {% else -%}
            ${CMAKE_CURRENT_SOURCE_DIR}/..
            {% endif -%}
    )
    
    # Link vcpkg dependencies to tests if needed
    if(COMMAND vcpkg_link_libraries)
        vcpkg_link_libraries(TARGET {{ project_name }}_tests LINK_TYPE PRIVATE)
    endif()
    
    # Compiler warnings for tests
    if(MSVC)
        target_compile_options({{ project_name }}_tests PRIVATE /W4)
    else()
        target_compile_options({{ project_name }}_tests PRIVATE -Wall -Wextra -Wpedantic)
    endif()
    
    # Use Catch2's test discovery
    catch_discover_tests({{ project_name }}_tests
        TEST_PREFIX "{{ project_name }}::"
        REPORTER XML
        OUTPUT_DIR .
        OUTPUT_PREFIX "{{ project_name }}_"
        OUTPUT_SUFFIX ".xml"
    )
    
    # Add a simple test target
    add_test(NAME {{ project_name }}_tests COMMAND {{ project_name }}_tests)
    
    message(STATUS "Test executable '{{ project_name }}_tests' configured with ${TEST_SOURCES}")
else()
    message(WARNING "No test files found in ${CMAKE_CURRENT_SOURCE_DIR}")
endif()

# Custom targets for testing
add_custom_target(test_verbose
    COMMAND ${CMAKE_CTEST_COMMAND} --verbose
    DEPENDS {{ project_name }}_tests
    COMMENT "Running tests with verbose output"
)

add_custom_target(test_xml
    COMMAND {{ project_name }}_tests -r xml -o test_results.xml
    DEPENDS {{ project_name }}_tests
    COMMENT "Running tests with XML output"
) 